CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=x1);
    Mux16(a=y, b=false, sel=zy, out=y1);

    Not16(in=x1, out=notx1);
    Mux16(a=x1, b=notx1, sel=nx, out=x2);

    Not16(in=y1, out=noty1);
    Mux16(a=y1, b=noty1, sel=ny, out=y2);

    And16(a=x2, b=y2, out=anded);
    Add16(a=x2, b=y2, out=added);

    Mux16(a=anded, b=added, sel=f, out=xy);

    Not16(in=xy, out=notxy);
    Mux16(a=xy, b=notxy, sel=no, out[15]=ng, out=preout);

    Or16Way(in=preout, out=ntzr);
    Not(in=ntzr, out=zr);

    Fwd16(in=preout, out=out);
}
